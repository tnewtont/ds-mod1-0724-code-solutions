# -*- coding: utf-8 -*-
"""human-resources-db

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/107wJ9ueKYNpqH3uhOnSIF3sVyLytb2pK

# **# 1 Retrieve table names from the database (hr.db).**
"""

import sqlite3
import pandas as pd

conn = sqlite3.connect('/content/hr.db')

cur = conn.cursor()

query1 = cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = query1.fetchall()
tables # Employee is the only table

query2 = cur.execute("SELECT * FROM employee;")
data = query2.fetchall()
data

"""# **#2 Retrieve EmployeeNumber, Department, Age, Gender, and Attrition for employees in sales department from the Employee table; save that information into a dataframe named ‘sales’.**"""

sales_query = cur.execute("""SELECT EmployeeNumber, Department, Age, Gender, Attrition
                            FROM employee;
                              """)

sales_list = sales_query.fetchall()
sales_list

sales = pd.DataFrame(data = sales_list)
sales #1470 rows

"""# **#3 Retrieve EmployeeNumber, EducationField, Age, Gender, and Attrition for employees in the Life Sciences field from the Employee table, save that information into a dataframe named ‘field’.**"""

field_query = cur.execute("""
                      SELECT EmployeeNumber, EducationField, Age, Gender, Attrition
                      FROM employee
                      WHERE EducationField = 'Life Sciences';
                        """)

field_list = field_query.fetchall()
field_list

field = pd.DataFrame(data = field_list)
field #606 rows

"""# **#4 Save the two dataframes as tables in the database, and then join the tables on the primary key.**"""

#df.values list of lists, each internal list is a row, which allows you to use executemany
# Consider df. You will have to pass in execute to create a new table (create table blah blah blah)
# Then use executemany to insert the many rows into the new table

create_sales_table = cur.execute("""
                                  CREATE TABLE sales_table(EmployeeNumber, Department, Age, Gender, Attrition);
                                  """)

create_field_table = cur.execute("""
                                  CREATE TABLE field_table(EmployeeNumber, EducationField, Age, Gender, Attrition);
                                  """)

# Inserting values into sales_table
cur.executemany("INSERT INTO sales_table VALUES(?, ?, ?, ?, ?)", sales_list)
conn.commit()

# Inserting values into field_table
cur.executemany("INSERT INTO field_table VALUES(?, ?, ?, ?, ?)", field_list)
conn.commit()

# Getting column names for sales
sales_columns_query = cur.execute("PRAGMA table_info(sales_table)")
sales_colnames = [i[1] for i in sales_columns_query.fetchall()]
sales_colnames

# Getting column names for field
field_columns_query = cur.execute("PRAGMA table_info(field_table)")
field_colnames = [i[1] for i in field_columns_query.fetchall()]
field_colnames

# Joining both sales_table and field_table
join_left_query = cur.execute("""
                          SELECT *
                          FROM sales_table as st
                          LEFT OUTER JOIN field_table as ft
                          ON ft.EmployeeNumber = st.EmployeeNumber;
                          """)

# Retrieving the joined table
join_data = join_left_query.fetchall()

join_table = pd.DataFrame(join_data, columns = sales_colnames + field_colnames)
join_table

join_table_2 = join_table.loc[:,~join_table.columns.duplicated()].copy() # Remove the duplicate columns

join_table_2

# Inner join
join_inner_query = cur.execute("""
                              SELECT *
                              FROM field_table as ft
                                INNER JOIN sales_table as st
                                ON st.EmployeeNumber = ft.EmployeeNumber;
                              """)

join_data_inner = join_inner_query.fetchall()

join_data_inner

join_table_inner = pd.DataFrame(join_data_inner, columns = sales_colnames + field_colnames)
join_table_inner

join_table_inner_2 = join_table_inner.loc[:,~join_table_inner.columns.duplicated()].copy()

join_table_inner_2