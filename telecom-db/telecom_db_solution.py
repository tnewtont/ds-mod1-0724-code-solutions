# -*- coding: utf-8 -*-
"""telecom-db-2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A4dvj8W408HVJm1uDFFn3XTloQs7sF5Q

# **#1 Retrieve table names from the database (telecom.db).**
"""

import sqlite3
import pandas as pd

conn = sqlite3.connect('/content/telecom.db')

cur = conn.cursor()

tables_query = cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = tables_query.fetchall()
tables # Table names are: 'train', 'event_type', 'severity_type', 'resource_type', and 'log_feature'

"""# **#2 Join all tables in the database on the primary key.**"""

train_info_query = cur.execute("PRAGMA table_info(train);")
train_info = train_info_query.fetchall()
train_info

event_type_info_query = cur.execute("PRAGMA table_info(event_type);")
event_type_info = event_type_info_query.fetchall()
event_type_info

severity_type_info_query = cur.execute("PRAGMA table_info(severity_type);")
severity_type_info = severity_type_info_query.fetchall()
severity_type_info

resource_type_info_query = cur.execute("PRAGMA table_info(resource_type);")
resource_type_info = resource_type_info_query.fetchall()
resource_type_info

log_feature_info_query = cur.execute("PRAGMA table_info(log_feature);")
log_feature_info = log_feature_info_query.fetchall()
log_feature_info

join_table_query = cur.execute("""
SELECT t.id, t.location, t.fault_severity, et.event_type, st.severity_type, rt.resource_type, lf.log_feature, lf.volume
FROM train AS t LEFT JOIN event_type as et ON t.id = et.id
				LEFT JOIN severity_type as st ON t.id = st.id
				LEFT JOIN resource_type as rt ON t.id = rt.id
				LEFT JOIN log_feature as lf ON t.id = lf.id;
""")
join_table_list = join_table_query.fetchall()

# Store this result into a separate table
create_join_table = cur.execute("CREATE TABLE join_table(id, location, fault_severity, event_type, severity_type, resource_type, log_feature, volume)")

# Store values into join_table
cur.executemany("INSERT INTO join_table VALUES(?, ?, ?, ?, ?, ?, ?, ?)", join_table_list) # Only run this once or might add excess data!!

# Testing if join_table was created successfully
test_query = cur.execute("SELECT * FROM join_table")
test_data = test_query.fetchall()

join_colnames = ['id', 'location', 'fault_severity', 'event_type', 'severity_type', 'resource_type', 'log_feature', 'volume']
test_df = pd.DataFrame(data=test_data, columns = join_colnames)
test_df

join_table_df = pd.DataFrame(data = join_table_list, columns = join_colnames)
join_table_df

"""# **#3 Find unique occurrences of event_type and severity in the table from #2 using an SQL query.**"""

# Unique event types
event_type_unique_query = cur.execute("""
                                SELECT DISTINCT(event_type)
                                FROM join_table;
                                """)
event_type_unique = event_type_info_query.fetchall()
event_type_unique_df = pd.DataFrame(data = event_type_unique)
event_type_unique_df

# Unique severity types
severity_type_unique_query = cur.execute("""
                                SELECT DISTINCT(severity_type)
                                FROM join_table;
                                """)
severity_type_unique = severity_type_info_query.fetchall()
severity_type_unique_df = pd.DataFrame(data = severity_type_unique)
severity_type_unique_df

"""# **#4 Find how many occurrences there are of each fault_severity in the table from #2 using an SQL query.**"""

fault_severity_occ_query = cur.execute("""
                                    SELECT severity_type, COUNT(severity_type)
                                    FROM join_table
                                    GROUP BY severity_type;
                                    """)
fault_severity_occ = fault_severity_occ_query.fetchall()
fault_severity_occ_df = pd.DataFrame(data = fault_severity_occ)
fault_severity_occ_df