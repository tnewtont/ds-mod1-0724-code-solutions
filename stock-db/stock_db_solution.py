# -*- coding: utf-8 -*-
"""stock-db

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11FYNMwxQjWI4-oFIE-78T2UwlUBxNRPb

# **#1 Create two new tables in the database (stocks.sqlite), one with only 'MSFT' values for the Symbol feature, and one with only 'AAPL' values for the Symbol feature.**
"""

import sqlite3
import pandas as pd

conn = sqlite3.connect('/content/stocks.sqlite')

cur = conn.cursor()

query1 = cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = query1.fetchall()

tables # STOCK_DATA is the table name

query2 = cur.execute("SELECT * FROM STOCK_DATA")
data = query2.fetchall()
data

stock_data_cols_query = cur.execute("PRAGMA table_info(STOCK_DATA)") # Getting column names of STOCK_DATA
stock_data_cols = [i[1] for i in stock_data_cols_query.fetchall()]
stock_data_cols

# Create table where Symbol = 'MSFT'
create_msft_table = cur.execute("CREATE TABLE msft_table(`index`, Date, Open, High, Low, Close, Volume, Adj Close, Symbol);")

# For msft_table
msft_query = cur.execute("""
                SELECT *
                FROM STOCK_DATA
                WHERE Symbol = 'MSFT';
              """)
msft_list = msft_query.fetchall()

cur.executemany("INSERT INTO msft_table VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", msft_list)

msft_table_query = cur.execute("SELECT * FROM msft_table")
msft_table_list = msft_table_query.fetchall()
msft_table_list

# Create table where Symbol = AAPL
create_aapl_table = cur.execute("CREATE TABLE aapl_table(`index`, Date, Open, High, Low, Close, Volume, Adj Close, Symbol);")

# For appl_table
aapl_query = cur.execute("""
                SELECT *
                FROM STOCK_DATA
                WHERE Symbol = 'AAPL';
              """)
aapl_list = aapl_query.fetchall()

cur.executemany("INSERT INTO aapl_table VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", aapl_list)

aapl_table_query = cur.execute("SELECT * FROM aapl_table")
aapl_table_list = aapl_table_query.fetchall()
aapl_table_list

"""# **#2 Read the two new new tables in from the database using SQL to check if they were successfully created.**"""

msft_table_list

aapl_table_list

"""# **#3 For each new table in the database, query for the Maximum and Minimum dates, and save those as new pandas data frames.**"""

# I was unsure if you wanted the two dates as their own dataframe or if you
# wanted all rows where the dates are equal to either of those.
# I went ahead and made two separate dataframes for each anyway


# msft_table max and min dates

msft_max_min_query = cur.execute("""
                                  SELECT MAX(Date) as max_date, MIN(Date) as min_date
                                  FROM msft_table;
                                  """)
msft_max_min_list = msft_max_min_query.fetchall()
msft_max_min_list # max_date is '2014-07-21' and min_date is '2000-01-03'

msft_max_min_df = pd.DataFrame(data = msft_max_min_list)
msft_max_min_df

msft_max_min_table_query = cur.execute("""
                            SELECT *
                            FROM msft_table
                            WHERE Date = '2014-07-21' OR Date = '2000-01-03';
                            """)
msft_max_min_table_list = msft_max_min_table_query.fetchall()
msft_max_min_table_df = pd.DataFrame(data = msft_max_min_table_list)
msft_max_min_table_df

# aapl_table max and min dates
aapl_max_min_query = cur.execute("""
                                  SELECT MAX(Date) as max_date, MIN(Date) as min_date
                                  FROM aapl_table;
                                  """)
aapl_max_min_list = aapl_max_min_query.fetchall()
aapl_max_min_list # max_date is '2014-07-21' and min_date is '2000-01-03'

aapl_max_min_df = pd.DataFrame(data = aapl_max_min_list)
aapl_max_min_df

aapl_max_min_table_query = cur.execute("""
                                        SELECT *
                                        FROM aapl_table
                                        WHERE Date = '2014-07-21' OR Date = '2000-01-03';
                                        """)
aapl_max_min_table_list = aapl_max_min_table_query.fetchall()
aapl_max_min_table_df = pd.DataFrame(data = aapl_max_min_table_list)
aapl_max_min_table_df

"""# **#4 For each new table in the database, query for values greater than 50 in the Open feature, and save those as new pandas data frames.**"""

# For msft_table
msft_50_query = cur.execute("""
                            SELECT *
                            FROM msft_table
                            WHERE Open > 50;
                            """)
msft_50_query_list = msft_50_query.fetchall()
msft_50_df = pd.DataFrame(data = msft_50_query_list)
msft_50_df

# For aapl_table
aapl_50_query = cur.execute("""
                            SELECT *
                            FROM aapl_table
                            WHERE Open > 50;
                            """)
aapl_50_query_list = aapl_50_query.fetchall()
aapl_50_df = pd.DataFrame(data = aapl_50_query_list)
aapl_50_df