# -*- coding: utf-8 -*-
"""merge-join-telecom

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNmyqlrAnzFk58HO3ykapVF1xO_GzXTq
"""

import numpy as np
import pandas as pd
import sqlite3

"""## **#1 Merge tables.**

# **#2 Understand the difference between inner and outer merge.**
"""

# Read each file
event_type = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\event_type.csv')
log_feature = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\log_feature.csv')
resource_type = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\resource_type.csv')
severity_type = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\severity_type.csv')
test = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\test.csv')
train = pd.read_csv(r'C:\Users\trucn\Documents\repositories\ds-mod1-0724-code-solutions\merge-join-telecom\Telstra Competition Data\train.csv')

# Inner merge, do not merge with test and sample_submission
imerge1 = event_type.merge(log_feature, how = 'inner', on = 'id')
imerge2 = imerge1.merge(resource_type, how = 'inner', on = 'id')
imerge3 = imerge2.merge(severity_type, how = 'inner', on = 'id')
imerge4 = imerge3.merge(train, how = 'inner', on = 'id')

imerge4

"""# #2 An inner merge only finds and returns all matching rows, but it does not return any unmatched rows. On the other hand, an outer merge returns all rows from the left and right dataframes, and it matches up rows where possible, with nulls elsewhere.

# **#3 Understand the difference between merge and join.**

# #3 The merge method allows us to specify columns beside the index to join on for multiple dataframes, whereas the join method combines the dataframes based on indexes. By default, unless specified via the 'how' argument, merge performs an inner join, whereas join performs a left join.

# **#4 Divide dataset into two dataframes.**
"""

# Split imerge4 into imerge4_r1 and imerge_r2 (by row, in half)
imerge4_row_count = len(imerge4)
imerge4_half_count = imerge4_row_count//2 # Since the row count doesn't divide evenly

imerge4_r1 = imerge4.iloc[:imerge4_half_count,:] # First half
imerge4_r2 = imerge4.iloc[imerge4_half_count:,:] # Second half

"""# **#5 Concat the two dataframes**"""

imerge4_concat = pd.concat([imerge4_r1, imerge4_r2]) # Concat the two
imerge4_concat.equals(imerge4) # Checking if the cocatenated dataframe equals the original

"""# **#6 Handle duplicates.**"""

# Drop duplicates by exact column name
imerge4 = imerge4.loc[:,~imerge4.columns.duplicated()].copy()
# Drop duplicates by exact column values
imerge4 = imerge4.T.drop_duplicates().T
# Drop duplicates by exact row-to-row contents
imerge4_final = imerge4.drop_duplicates()

imerge4_final